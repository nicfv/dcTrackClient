{
    "$schema": "schema.json",
    "getItem": {
        "description": "Get item details using the item ID. Returns an Item JSON object.",
        "endpoint": "api/v2/dcimoperations/items/{id}"
    },
    "createItem": {
        "description": "Create a new item. When returnDetails is set to true, the API call will return the full json payload. If set to false, the call returns only the \"id\" and \"tiName\". Returns the newly created item JSON object.",
        "endpoint": "api/v2/dcimoperations/items",
        "parameters": {
            "returnDetails": "boolean",
            "proceedOnWarning": "boolean"
        }
    },
    "updateItem": {
        "description": "Update an existing item. When returnDetails is set to true, the API call will return the full json payload. If set to false, the call returns only the \"id\" and \"tiName\".",
        "endpoint": "api/v2/dcimoperations/items/{id}",
        "parameters": {
            "returnDetails": "boolean",
            "proceedOnWarning": "boolean"
        }
    },
    "deleteItem": {
        "description": "Delete an item using the item ID.",
        "endpoint": "api/v2/dcimoperations/items/{id}",
        "parameters": {
            "proceedOnWarning": "boolean"
        }
    },
    "searchItems": {
        "description": "Search for items using criteria JSON object. Search criteria can be any of the fields applicable to items, including custom fields. Specify the fields to be included in the response. This API supports pagination. Returns a list of items with the specified information.",
        "endpoint": "api/v2/quicksearch/items",
        "parameters": {
            "pageNumber": "number",
            "pageSize": "number"
        }
    },
    "getCabinetItems": {
        "description": "Returns a list of Items contained in a Cabinet using the ItemID of the Cabinet. The returned list includes all of the Cabinet's Items including Passive Items.",
        "endpoint": "api/v2/items/cabinetItems/{CabinetId}"
    },
    "createItemsBulk": {
        "description": "Add/Update/Delete Items.",
        "endpoint": "api/v2/dcimoperations/items/bulk"
    },
    "getMakes": {
        "description": "Returns a list of makes with basic information.",
        "endpoint": "api/v2/makes"
    },
    "createMake": {
        "description": "Add a new Make. Returns JSON entity containing Make information that was passed in from the Request payload.",
        "endpoint": "api/v2/makes"
    },
    "updateMake": {
        "description": "Modify a Make. Returns JSON entity containing Make information that was passed in from the Request payload.",
        "endpoint": "api/v2/makes/{makeId}"
    },
    "deleteMake": {
        "description": "Delete a Make.",
        "endpoint": "api/v2/makes/{makeId}"
    },
    "getMakesByName": {
        "description": "Search for a make using the make name. Returns a list of makes with basic information.",
        "endpoint": "api/v2/dcimoperations/search/makes/{makeName}"
    },
    "getModel": {
        "description": "Get Model fields for the specified Model ID. usedCounts is an optional parameter that determines if the count of Items for the specified model is returned in the response. If set to \"true\" the counts will be included in the response, if omitted or set to \"false\" the item count will not be included in the response.",
        "endpoint": "api/v2/models/{modelId}",
        "parameters": {
            "usedCounts": "boolean"
        }
    },
    "createModel": {
        "description": "Add a new Model. Returns JSON entity containing Make information that was passed in from the Request payload. \"proceedOnWarning\" relates to the warning messages that are thrown in dcTrack when you try to delete custom fields that are in use. The \"proceedOnWarning\" value can equal either \"true\" or \"false.\" If \"proceedOnWarning\" equals \"true,\" business warnings will be ignored. If \"proceedOnWarning\" equals \"false,\" business warnings will not be ignored. Fields that are not in the payload will remain unchanged.",
        "endpoint": "api/v2/models",
        "parameters": {
            "returnDetails": "boolean",
            "proceedOnWarning": "boolean"
        }
    },
    "updateModel": {
        "description": "Modify an existing Model. Fields that are not in the payload will remain unchanged. Returns a JSON entity containing Make information that was passed in from the Request payload. This API performs as a PUT and not a PATCH. For example, the Request includes the dataPorts list but nothing inside it, the data ports will be removed, or you include a new port in the list , but not the current port on the device, it will remove the port that already exists and create a new port.",
        "endpoint": "api/v2/models/{id}",
        "parameters": {
            "returnDetails": "boolean",
            "proceedOnWarning": "boolean"
        }
    },
    "modifyModel": {
        "description": "Modify an existing Model. This is currently being released as a Beta version for early release and is subject to change.",
        "endpoint": "api/v2/models/{id}",
        "parameters": {
            "returnDetails": "boolean",
            "proceedOnWarning": "boolean"
        }
    },
    "deleteModel": {
        "description": "Delete a Model using the Model ID.",
        "endpoint": "api/v2/models/{id}"
    },
    "searchModels": {
        "description": "Search for models by user supplied search criteria. Returns a list of models with the \"selectedColumns\" returned in the payload. Search by Alias is not supported.",
        "endpoint": "api/v2/quicksearch/models",
        "parameters": {
            "pageNumber": "number",
            "pageSize": "number"
        }
    },
    "deleteModelImage": {
        "description": "Delete a Mode Image using the Model ID and the Image Orientation, where id is the Model Id and orientation is either front or back",
        "endpoint": "api/v2/models/images/{id}/{orientation}"
    },
    "getConnector": {
        "description": "Get a Connector record by ID. Returns a Connector with all information including Compatible Connectors. The usedCount parameter is optional. If usedCount is true, the response will include the number of times the connector is in use by Models and Items. If false, no counts are returned. If omitted the default is false.",
        "endpoint": "api/v2/settings/connectors/{connectorId}",
        "parameters": {
            "usedCount": "boolean"
        }
    },
    "createConnector": {
        "description": "Add a new Connector. Returns JSON entity containing Connector information that was passed in from the Request payload.",
        "endpoint": "api/v2/settings/connectors"
    },
    "updateConnector": {
        "description": "Update an existing Connector. Returns JSON entity containing Connector information that was passed in from the Request payload.",
        "endpoint": "api/v2/settings/connectors/{connectorId}"
    },
    "removeConnector": {
        "description": "Delete one or more Connector records.",
        "endpoint": "api/v2/settings/connectors/delete"
    },
    "searchConnectors": {
        "description": "Search for Connectors using criteria JSON object. Search criteria can be any of the fields applicable to Connector, including custom fields. Specify the fields to be included in the response. This API supports pagination. Returns a list of Connectors with the specified information.",
        "endpoint": "api/v2/quicksearch/connectors",
        "parameters": {
            "pageNumber": "number",
            "pageSize": "number"
        }
    },
    "deleteConnectorImage": {
        "description": "Delete a Connector Image using the Connector ID.",
        "endpoint": "api/v2/settings/connectors/{connectorId}/images"
    },
    "getDataPorts": {
        "description": "Use the REST API to retrieve details from all data ports on an item. If the operation was successful, a status code 200 is displayed, and the body contains the item's data port details. If the operation failed, an error code is returned.",
        "endpoint": "api/v1/items/{itemId}/dataports"
    },
    "getDataPort": {
        "description": "Use the REST API to read the details of an item's data port. To do this, specify the item and item data port ID. If the operation was successful, a status code 200 is displayed, and the body contains the item's data port details. If the operation failed, an error code is returned.",
        "endpoint": "api/v1/items/{itemId}/dataports/{dataportId}"
    },
    "createDataPorts": {
        "description": "Use the REST API to create data ports for an existing item. If ports are already defined for the item because it is included in the Item Models Library, you can use the REST API to create additional ports for the item. Payload contains data port parameter details in json format. All required fields must be included.",
        "endpoint": "api/v1/items/{itemId}/dataports"
    },
    "updateDataPort": {
        "description": "Update an item's data port details using the REST API. To do this, specify the item and data port ID, and provide the updated parameter value(s). Payload contains data port parameter details in json format. All required fields must be included.",
        "endpoint": "api/v1/items/{itemId}/dataports/{dataportId}"
    },
    "deleteDataPort": {
        "description": "Delete an item's data port using the REST API by specifying the item ID and data port ID. If the operation is successful, a status code 200 is displayed. If the operation failed, an error code is returned.",
        "endpoint": "api/v1/items/{itemId}/dataports/{dataportId}"
    },
    "getPowerPorts": {
        "description": "Use the REST API to retrieve details from all power ports on an item.",
        "endpoint": "api/v1/items/{itemId}/powerports"
    },
    "getPowerPort": {
        "description": "Use the REST API to retrieve details from one power port on an item.",
        "endpoint": "api/v1/items/{itemId}/powerports/{portId}"
    },
    "updatePowerPort": {
        "description": "Use the REST API to create power ports for an existing item. If ports are already defined for the item because it is included in the Item Models Library, you can use the REST API to create additional ports for the item.",
        "endpoint": "api/v1/items/{itemId}/powerports/{portId}",
        "parameters": {
            "proceedOnWarning": "boolean"
        }
    },
    "getCompatibleConnector": {
        "description": "Use the REST API to determine if a Connector is compatible with a specific Power Port.",
        "endpoint": "api/v1/items/{itemId}/powerports/{portId}/connectors/{connectorId}/isCompatible"
    },
    "getBreakers": {
        "description": "Get a list of all Breakers for a given Panel Item. Returns JSON entity containing an array of all the Breakers for the specified Panel Item.",
        "endpoint": "api/v2/dcimoperations/items/{panelItemId}/breakers"
    },
    "getBreaker": {
        "description": "Get a list of all Breakers for a given Panel Item. Returns JSON entity containing information for a single Panel Item Breaker.",
        "endpoint": "api/v2/dcimoperations/items/{panelItemId}/breakers/{breakerPortId}"
    },
    "updateBreaker": {
        "description": "Update a single Breaker for a given Panel Item. Returns JSON entity containing information for the updated Panel Item Breaker. Note: This API performs as a true PUT and not a PATCH. Unlike with a PATCH, you must specify all attributes even if you want to change only one. Attributes that are not included in the Request will be considered as removed.",
        "endpoint": "api/v2/dcimoperations/items/{panelItemId}/breakers/{breakerPortId}"
    },
    "createBreaker": {
        "description": "Create a single Breaker for a given Panel Item. Returns JSON entity containing information for the created Panel Item Breaker. Note: Breaker State is set based on the connection status of the Breaker. If the breaker is connected it will always be set to \"Closed\", even if \"Open\" is specified in the Request.",
        "endpoint": "api/v2/dcimoperations/items/{panelItemId}/breakers"
    },
    "deleteBreaker": {
        "description": "Delete a Breaker for a given Panel Item. Returns empty JSON.",
        "endpoint": "api/v2/dcimoperations/items/{panelItemId}/breakers/{breakerPortId}"
    },
    "createBreakersBulk": {
        "description": "Add/Update/Delete Breakers for a given Panel Item.",
        "endpoint": "api/v2/dcimoperations/items/{panelItemId}/breakers/bulk"
    },
    "getLocations": {
        "description": "Returns a list for all Locations.",
        "endpoint": "api/v1/locations"
    },
    "getLocation": {
        "description": "Get a single Location. Returns json containing location data for the specified ID.",
        "endpoint": "api/v1/locations{locationId}"
    },
    "createLocation": {
        "description": "Add a Location. Returns the JSON entity containing location info that was passed in. Note: \"proceedOnWarning\" relates to the warning messages that are thrown in dcTrack when you try to delete custom fields that are in use. The \"proceedOnWarning\" value can equal either \"true\" or \"false.\" If \"proceedOnWarning\" equals \"true,\" business warnings will be ignored. If \"proceedOnWarning\" equals \"false,\" business warnings will not be ignored.",
        "endpoint": "api/v1/locations",
        "parameters": {
            "proceedOnWarning": "boolean"
        }
    },
    "updateLocation": {
        "description": "Modify Location details for a single Location. Payload contains new location details. You do not have have to provide all details, but only those that you want to modify. Returns JSON entity containing Location information that was passed in from the Request payload.",
        "endpoint": "api/v1/locations/{locationId}",
        "parameters": {
            "proceedOnWarning": "boolean"
        }
    },
    "deleteLocation": {
        "description": "Delete a Location.",
        "endpoint": "api/v1/locations/{locationId}"
    },
    "searchLocations": {
        "description": "Search for Locations by user supplied search criteria. Returns a list of Locations with the \"selectedColumns\" returned in the payload.",
        "endpoint": "api/v2/quicksearch/locations",
        "parameters": {
            "pageNumber": "number",
            "pageSize": "number"
        }
    },
    "getLocationFieldList": {
        "description": "Returns a list of all Location fields.",
        "endpoint": "api/v2/quicksearch/locations/locationListFields"
    },
    "getSublocations": {
        "description": "Get all sub-locations for a given location in the hierarchy. The locationId is the ID of the location to get the sub-locations for.",
        "endpoint": "api/v2/subLocations/list/{locationId}"
    },
    "getSublocationsOfType": {
        "description": "Get all sub-locations of given type for a given location in the hierarchy. The locationId is the id of the location you are querying the sub-location types for. The type is one of either 5016 and 5017 for rows and aisles respectively.",
        "endpoint": "api/v2/subLocations/{locationId}/type/{typeCode}"
    },
    "getChildSublocations": {
        "description": "Get all child sub-locations for a given sub-location in the hierarchy. The locationId is the ID of the location to fetch the sub-locations for. The subLocationId is the ID of the parent sub-location that you are querying the children of.",
        "endpoint": "api/v2/subLocations/{subLocationId}/children"
    },
    "getSublocation": {
        "description": "Get details for a given sub-location. The subLocationId is the id of the sub-location you are querying for.",
        "endpoint": "api/v2/subLocations/{subLocationId}"
    },
    "createSublocation": {
        "description": "Add a new sub-location to the given location. Returns a list from the Sub-Location Hash.",
        "endpoint": "api/v2/subLocations"
    },
    "updateSublocation": {
        "description": "Update a sub-location. Returns a list from the Sub-Location Hash.",
        "endpoint": "api/v2/subLocations/{subLocationId}"
    },
    "deleteSublocation": {
        "description": "Deletes the given sub-location. The locationId is the ID of the location that the sub-location belongs to and the subLocationId is the ID of the location you are querying. Returns a success message upon success.",
        "endpoint": "api/v2/subLocations/{subLocationId}"
    },
    "getLocationFavorites": {
        "description": "Retrieve a List of Location Favorites for a specific User.",
        "endpoint": "api/v2/users/{username}/favorites/LOCATION"
    },
    "getLocationFavoritesAllUsers": {
        "description": "Retrieve a List of Location Favorites for all Users. Returns JSON entity containing Location Favorite information for all users.",
        "endpoint": "api/v2/users/favorites/LOCATION"
    },
    "updateLocationFavorites": {
        "description": "Assign Location Favorites to a user where username is a valid dcTrack user and \"favorite\" is either true or false to indicate whether you are assigning or unassigning. JSON entity containing all Location Favorites for the specified user.",
        "endpoint": "api/v2/users/{username}/favorites"
    },
    "updateLocationFavoritesAllUsers": {
        "description": "Assign Location Favorites to a user. To Assign favorites the \"favorite\" column should be set to true. To Unassign favorites the \"favorite\" column should be set to false. Returns JSON entity containing all Location Favorites for the specified users.",
        "endpoint": "api/v2/users/favorites"
    },
    "searchCabinetSpace": {
        "description": "Find Cabinets with available space based on RUs within the specified Locations.",
        "endpoint": "api/v2/capacity/cabinets/list/search"
    },
    "searchAvailableRUs": {
        "description": "Find the starting RUs within a Cabinet with the specified number of contiguous RUs.",
        "endpoint": "api/v2/items/uposition/available"
    },
    "getPermission": {
        "description": "Get explicit permission by ID. Returns JSON entity containing Permission information for the specified Permission Id.",
        "endpoint": "api/v2/permissions/explicit/{permissionId}"
    },
    "createPermission": {
        "description": "Add explicit permission. Returns JSON entity containing Permission information for the added Permission.",
        "endpoint": "api/v2/permissions/explicit"
    },
    "updatePermission": {
        "description": "Update explicit permission. Returns JSON entity containing Permission information for the updated Permission.",
        "endpoint": "api/v2/permissions/explicit/{permissionId}"
    },
    "deletePermission": {
        "description": "Delete explicit permission.",
        "endpoint": "api/v2/permissions/explicit/{permissionId}"
    },
    "createPermissionsBulk": {
        "description": "Add/Update/Delete explicit permissions.",
        "endpoint": "api/v2/permissions/explicit/bulk"
    },
    "getPermissions": {
        "description": "Get all explicit permissions. Returns JSON entity containing Permission information.",
        "endpoint": "api/v2/permissions/explicit"
    },
    "getPermissionsByEntityType": {
        "description": "Get explicit permissions by Entity Type. Returns JSON entity containing Permission information.",
        "endpoint": "api/v2/permissions/explicit/entityType/{entityType}"
    },
    "getPermissionsByEntityId": {
        "description": "Get explicit permissions by Entity Type and Entity ID. Returns JSON entity containing Permission information.",
        "endpoint": "api/v2/permissions/explicit/{entityType}/{entityId}"
    },
    "getRecords": {
        "description": "Get a list of records (options) for use in drop-down lists by indicating a list type and an ID. ID is optional for some list types. Returns a list of records for a given list type.",
        "endpoint": "api/v2/dcimoperations/lookups/{listType}/{id}"
    },
    "getPicklistOptions": {
        "description": "Get a list of records (options) for use in drop-down lists for dcTrack standard fields by list type. Returns a list of records for a given list type.",
        "endpoint": "api/v2/dcimoperations/picklists/{listType}"
    },
    "updatePicklistOptions": {
        "description": "Update a list of records (options) for use in drop-down lists for dcTrack standard fields by list type. Returns a list of records for a given list type.",
        "endpoint": "api/v2/dcimoperations/picklists/{listType}"
    },
    "updateDefaultValue": {
        "description": "Update the default value for a picklist field.",
        "endpoint": "api/v2/settings/lists/defaultValue"
    },
    "getFieldProperties": {
        "description": "Get the properties for all fields applicable to the Entity.",
        "endpoint": "api/v2/settings/lists/fieldProperties",
        "parameters": {
            "entity": "string"
        }
    },
    "createRequest": {
        "description": "Create a request.",
        "endpoint": "api/v2/dcimoperations/requests"
    },
    "deleteRequest": {
        "description": "Cancel a request. Returns Returns request ID canceled.",
        "endpoint": "api/v2/dcimoperations/requests/{requestId}"
    },
    "createRequestBulk": {
        "description": "Add/Update/Delete Requests in Bulk. The body of the Request should contain the required fields required to perform the specified Method. Returns JSON entity containing data for the Requests.",
        "endpoint": "api/v2/dcimoperations/requests/bulk"
    },
    "completeRequest": {
        "description": "Change request status/stage to Complete using the request ID. Optionally, pass a request body with additional information. Returns request status information.",
        "endpoint": "api/v2/dcimoperations/requests/complete/{requestId}"
    },
    "completeWorkOrder": {
        "description": "Complete work order and change work order status/stage to Complete. Optionally, pass a request body with additional information. Returns work order status information.",
        "endpoint": "api/v2/dcimoperations/workorders/complete/{workOrderId}"
    },
    "getRequestStatusByItem": {
        "description": "Get a list of pending request status information for a given item ID. Returns list of request status.",
        "endpoint": "api/v2/dcimoperations/requests/pending/{itemId}"
    },
    "getRequest": {
        "description": "Get request status information for a given request ID. Returns full request status information.",
        "endpoint": "api/v2/dcimoperations/requests/status/{requestId}"
    },
    "searchRequests": {
        "description": "Get request status information for a given request ID. Returns full request status information.",
        "endpoint": "api/v2/dcimoperations/search/list/requests"
    },
    "createDataConnection": {
        "description": "Create a data connection. Returns the newly created data connection.",
        "endpoint": "api/v2/connections/dataconnections"
    },
    "updateDataConnection": {
        "description": "Edit a data connection. Returns the newly edited data connection.",
        "endpoint": "api/v2/connections/dataconnections/{connectionId}"
    },
    "getDataConnection": {
        "description": "Get a data connection and associated details. Requires the ID of the connection you want to retrieve. Returns the requested data connection and associated details.",
        "endpoint": "api/v2/connections/dataconnections/{connectionId}"
    },
    "getDataConnectionByNode": {
        "description": "Get data connection details based on the specified location, item name, and port name. The itemName specified in the URL must be either the starting or ending Item in the connection. This API does not support Data Panel Ports. Returns the JSON payload with the requested data connection details.",
        "endpoint": "api/v2/connections/dataconnections",
        "parameters": {
            "location": "string",
            "itemName": "string",
            "portName": "string"
        }
    },
    "deleteDataConnection": {
        "description": "Deletes the specified data connection.",
        "endpoint": "api/v2/connections/dataconnections/{connectionId}"
    },
    "createPowerConnection": {
        "description": "Create a power connection. Returns the newly created power connection.",
        "endpoint": "api/v2/connections/powerconnections"
    },
    "updatePowerConnection": {
        "description": "Edit a power connection. Returns the newly edited power connection.",
        "endpoint": "api/v2/connections/powerconnections/{connectionId}"
    },
    "getPowerConnection": {
        "description": "Get a power connection and associated details. Requires the ID of the connection you want to retrieve. Returns the requested power connection and associated details.",
        "endpoint": "api/v2/connections/powerconnections/{connectionId}"
    },
    "getPowerConnectionByNode": {
        "description": "Get power connection details based on the specified location, item name, and port name. Returns the JSON payload with the requested power connection details.",
        "endpoint": "api/v2/connections/powerconnections",
        "parameters": {
            "location": "string",
            "itemName": "string",
            "portName": "string"
        }
    },
    "deletePowerConnection": {
        "description": "Deletes the specified power connection. Deletes the power connection.",
        "endpoint": "api/v2/connections/powerconnections/{connectionId}"
    },
    "getCircuit": {
        "description": "Get power or data circuit details based on the specified circuit type location, item name, and port name. Returns the JSON payload with the requested power or data connection details.",
        "endpoint": "api/v2/dcimoperations/circuits/{circuitType}",
        "parameters": {
            "location": "string",
            "itemName": "string",
            "portName": "string"
        }
    },
    "retrievePowerChain": {
        "description": "Get links and nodes of entire power chain with customizable node details for a specific location. JSON entity containing data for the entire Power Chain for a given Location. The example below illustrates returning all fields by leaving the \"selectedColumn\" array empty. To limit the columns in the response, list the specific columns.",
        "endpoint": "api/v2/powerChain/{locationId}"
    },
    "retrievePowerSumForPorts": {
        "description": "Get power sum for power ports with port ID list.",
        "endpoint": "api/v2/powerChain/powerSum/bulk"
    },
    "retrievePowerSumForItems": {
        "description": "Get power sum for power ports using item ID list.",
        "endpoint": "api/v2/items/powerSum/bulk"
    },
    "getActualReadingsByItem": {
        "description": "Update Actual Readings for Power Ports for an Item.",
        "endpoint": "api/v2/powerChain/items/actualReadings/{itemId}"
    },
    "retrieveActualReadingsByItems": {
        "description": "Retrieve Actual Readings for Power Ports for multiple Items.",
        "endpoint": "api/v2/powerChain/items/actualReadings/bulk"
    },
    "retrieveActualReadingsByPorts": {
        "description": "Update Actual Readings for Power Ports on one or more items.",
        "endpoint": "api/v2/powerChain/ports/actualReadings/bulk"
    },
    "updateActualReadingsByPort": {
        "description": "Update Actual Readings By Port.",
        "endpoint": "api/v2/powerChain/ports/actualReadings/{portId}"
    },
    "getActualReadingsByPort": {
        "description": "Get Actual Readings By Port.",
        "endpoint": "api/v2/powerChain/ports/actualReadings/{portId}"
    },
    "getTicket": {
        "description": "Get Ticket by Ticket ID.",
        "endpoint": "api/v2/tickets/{ticketId}"
    },
    "createTicket": {
        "description": "Create a Ticket.",
        "endpoint": "api/v2/tickets"
    },
    "updateTicket": {
        "description": "Update a Ticket.",
        "endpoint": "api/v2/tickets/{ticketId}"
    },
    "deleteTicket": {
        "description": "Delete Ticket by Ticket ID.",
        "endpoint": "api/v2/tickets/{ticketId}",
        "parameters": {
            "proceedOnWarning": "boolean"
        }
    },
    "searchTickets": {
        "description": "Search for Tickets using criteria JSON object. Search criteria can be any of the fields applicable to Tickets, including custom fields. Specify the fields to be included in the response. This API supports pagination. Returns a list of Tickets with the specified information.",
        "endpoint": "api/v2/quicksearch/tickets",
        "parameters": {
            "pageNumber": "number",
            "pageSize": "number"
        }
    },
    "getTicketFieldList": {
        "description": "Returns a list of all Ticket fields.",
        "endpoint": "api/v2/quicksearch/tickets/ticketListFields"
    },
    "createTicketsBulk": {
        "description": "Add/Update/Delete Tickets in Bulk. The body of the Request should contain the required fields required to perform the specified Method.",
        "endpoint": "api/v2/tickets/bulk"
    },
    "createTicketAssignment": {
        "description": "Assign Item to Ticket. The entity Ids provided in the Request should be the ID of the entity to be assigned to the Ticket.",
        "endpoint": "api/v2/tickets/assignment/{entityType}/assign"
    },
    "removeTicketAssignment": {
        "description": "Unassign Item from Ticket. This API will disassociate multiple Items or Circuits from a Ticket. The Ids provided in the Request should be the IDs of the assignment records.",
        "endpoint": "api/v2/tickets/assignment/{entityType}/unassign"
    },
    "createCustomField": {
        "description": "Creates a custom field. Returns the newly created custom field.",
        "endpoint": "api/v2/settings/lists/customFields"
    },
    "updateCustomField": {
        "description": "Update the definitions of the specified custom fields. Returns the updated custom field definitions.",
        "endpoint": "api/v2/settings/lists/customFields/{customFieldId}"
    },
    "getCustomFields": {
        "description": "Get a list of custom fields. Returns a list of all custom fields.",
        "endpoint": "api/v2/settings/lists/customFields",
        "parameters": {
            "orderPickListsBy": "string"
        }
    },
    "getCustomField": {
        "description": "Get the custom field details for a given customFieldId. Passing a -1 value will return all the labels with null values. Returns a list of custom field details for the specified custom field.",
        "endpoint": "api/v2/settings/lists/customFields/{customFieldId}",
        "parameters": {
            "orderPickListsBy": "string"
        }
    },
    "deleteCustomField": {
        "description": "Deletes the specified custom field and associated pick lists.",
        "endpoint": "api/v2/settings/lists/customFields/{customFieldId}",
        "parameters": {
            "proceedOnWarning": "boolean"
        }
    },
    "getWebhook": {
        "description": "Returns the current Webhook configuration information.",
        "endpoint": "api/v2/notifications/config"
    },
    "updateWebhook": {
        "description": "Update the Webhook configuration information.",
        "endpoint": "api/v2/notifications/config"
    },
    "deleteWebhook": {
        "description": "Deletes the Webhook configuration.",
        "endpoint": "api/v2/notifications/config"
    },
    "getRelationship": {
        "description": "Get Relationship details using the Relationship ID.",
        "endpoint": "api/v2/relationship/{id}"
    },
    "createRelationship": {
        "description": "Create a new entity link. Returns the newly created item JSON object. Note: Supported entity Types are \"PROJECT\", \"TICKET\", \"ITEM\".",
        "endpoint": "api/v2/relationship"
    },
    "getRelationshipByEntity": {
        "description": "Search for Entity Links BY Entity Type and Entity ID. Entity Types are \"PROJECT\", \"ITEM\". Returns a Project JSON object.",
        "endpoint": "api/v2/relationship/{entityType}/{entityId}"
    },
    "searchRelationships": {
        "description": "Search for Entity Links. Returns an array of Relationship links for the entity type.",
        "endpoint": "api/v2/relationship/search"
    },
    "deleteRelationship": {
        "description": "Delete an Entity Link using the Relationship ID.",
        "endpoint": "api/v2/relationship/{id}"
    },
    "getFloormapConfig": {
        "description": "Get floormap configuration for specific location.",
        "endpoint": "api/v2/visualization/floormaps/configuration/{locationId}"
    },
    "getFloormapConfigs": {
        "description": "Get floormap configuration for all locations.",
        "endpoint": "api/v2/visualization/floormaps/configuration"
    },
    "updateFloormapConfig": {
        "description": "Modify floormap configuration for specific location.",
        "endpoint": "api/v2/visualization/floormaps/configuration/{locationId}"
    },
    "createFloormapConfigsBulk": {
        "description": "Modify floormap configurations for multiple locations.",
        "endpoint": "api/v2/visualization/floormaps/configuration/bulk"
    },
    "createProject": {
        "description": "Add a new Project. JSON entity containing Project information that was passed in from the Request payload.",
        "endpoint": "api/v2/dcimoperations/projects"
    },
    "updateProject": {
        "description": "Modify a Project. JSON entity containing Project information that was passed in from the Request payload.",
        "endpoint": "api/v2/dcimoperations/projects/{id}"
    },
    "deleteProject": {
        "description": "Delete a Project using the Project ID.",
        "endpoint": "api/v2/dcimoperations/projects/{id}"
    },
    "getProject": {
        "description": "Get Project details using the Project ID. Returns a Project JSON object.",
        "endpoint": "api/v2/dcimoperations/projects/{id}"
    },
    "createPartClass": {
        "description": "Create Part Classes. Returns JSON entity containing data for the created Part Class.",
        "endpoint": "api/v2/parts/classes"
    },
    "updatePartClass": {
        "description": "Update Part Classes. Returns JSON entity containing data for the updated Part Class.",
        "endpoint": "api/v2/parts/classes/{classId}"
    },
    "deletePartClass": {
        "description": "Delete Part Class by Class ID.",
        "endpoint": "api/v2/parts/classes/{classId}"
    },
    "getPartClasses": {
        "description": "Returns a list of Part Classes with basic information.",
        "endpoint": "api/v2/parts/classes"
    },
    "createPartClassesBulk": {
        "description": "Create, Update, Delete Part Classes in Bulk. Returns JSON entity containing a list of response codes.",
        "endpoint": "api/v2/parts/classes/bulk"
    },
    "createPartModel": {
        "description": "Create Part Model. Returns JSON entity containing data for the created Part Model.",
        "endpoint": "api/v2/partModels"
    },
    "updatePartModel": {
        "description": "Update a Part Model. Returns JSON entity containing data for the Updated Part Model.",
        "endpoint": "api/v2/partModels/{modelId}"
    },
    "deletePartModel": {
        "description": "Delete Part Model by Model ID.",
        "endpoint": "api/v2/partModels/{modelId}"
    },
    "getPartModel": {
        "description": "Get Model by Model ID. Returns JSON entity containing data for a single Model.",
        "endpoint": "api/v2/partModels/{modelId}"
    },
    "searchPartModels": {
        "description": "Search for Part Models using criteria JSON object. Search criteria can be any of the fields applicable to Part Models, including custom fields. Specify the field to be included in the response. This API supports pagination. Returns a list of Part Models with the specified information.",
        "endpoint": "api/v2/quicksearch/parts/models",
        "parameters": {
            "pageNumber": "number",
            "pageSize": "number"
        }
    },
    "deletePartModelImage": {
        "description": "Delete a Part Model Image using the Part Model ID.",
        "endpoint": "api/v2/partModels/images/{modelId}"
    },
    "createPartModelsBulk": {
        "description": "Create, Update, Delete Part Models in Bulk. Returns JSON entity containing a list of response codes.",
        "endpoint": "api/v2/partModels/bulk"
    },
    "getPartModelFieldList": {
        "description": "Returns a list of all Part Model fields.",
        "endpoint": "api/v2/quicksearch/parts/partModelListFields"
    },
    "createPart": {
        "description": "Create Part Instance. Returns JSON entity containing data for the created Part Instance.",
        "endpoint": "api/v2/parts"
    },
    "getPart": {
        "description": "Get Part Instance by Part ID. Returns JSON entity containing data for a single Part Instance.",
        "endpoint": "api/v2/parts/{partId}"
    },
    "updatePart": {
        "description": "Update Part Instance. Returns JSON entity containing data for a single Part Instance.",
        "endpoint": "api/v2/parts/{partId}"
    },
    "deletePart": {
        "description": "Delete Part Instance. JSON entity containing errors and warnings.",
        "endpoint": "api/v2/parts/{partId}"
    },
    "createPartsBulk": {
        "description": "Create, Update, Delete Part Instances in Bulk. Returns JSON entity containing a list of response codes.",
        "endpoint": "api/v2/parts/bulk"
    },
    "updateStock": {
        "description": "Adjust or Transfer Stock where \"activity\" can be \"adjust\" or \"transfer\". Returns JSON entity containing data for the transaction performed.",
        "endpoint": "api/v2/parts/{partId}/stock/{activity}"
    },
    "createPartAssignment": {
        "description": "Assign Parts to Items or Item Ports where \"assignmentType\" can be \"ITEMS\" or \"PORTS\". Returns JSON entity containing data for the assignment.",
        "endpoint": "api/v2/parts/assignments/{assignmentType}"
    },
    "getPartFieldList": {
        "description": "Returns a list of all Part fields.",
        "endpoint": "api/v2/quicksearch/parts/partListFields"
    },
    "searchParts": {
        "description": "Search for Parts using criteria JSON object. Search criteria can be any of the fields applicable to Parts, including custom fields. Specify the field to be included in the response. This API supports pagination. Returns a list of Parts with the specified information.",
        "endpoint": "api/v2/quicksearch/parts",
        "parameters": {
            "pageNumber": "number",
            "pageSize": "number"
        }
    },
    "getPartTransactionFieldList": {
        "description": "Returns a list of all Part Transaction fields.",
        "endpoint": "api/v2/quicksearch/parts/partTransactionListFields"
    },
    "searchPartTransactions": {
        "description": "Search for Part Transactions using criteria JSON object. Search criteria can be any of the fields applicable to Part Transactions, including custom fields. Specify the field to be included in the response. This API supports pagination. Returns a list of Part Transactions with the specified information.",
        "endpoint": "api/v2/quicksearch/parts/transactions",
        "parameters": {
            "pageNumber": "number",
            "pageSize": "number"
        }
    },
    "searchAuditTrail": {
        "description": "Search for one or more Audit Trail records by user supplied search criteria using the REST API v2. Returns a list of models with the \"selectedColumns\" returned in the payload.",
        "endpoint": "api/v2/quicksearch/auditTrail",
        "parameters": {
            "pageNumber": "number",
            "pageSize": "number"
        }
    },
    "getAuditTrailFieldList": {
        "description": "Returns a list of all Audit Trail fields.",
        "endpoint": "api/v2/quicksearch/auditTrail/auditTrailListFields"
    },
    "getCharts": {
        "description": "Get a list of all available chart widgets in the system.",
        "endpoint": "api/v2/reports/charts"
    },
    "getChart": {
        "description": "Get chart details by ID.",
        "endpoint": "api/v2/reports/charts/{id}"
    },
    "retrieveChartData": {
        "description": "Get chart data by ID.",
        "endpoint": "api/v2/reports/charts/{id}/data"
    },
    "retrieveChartDetails": {
        "description": "Get a widget's details including a list of parameters.",
        "endpoint": "api/v2/reports/charts/{id}/details"
    },
    "retrieveChartParameters": {
        "description": "Get a listing of parameter pick-list choices. ID is the record id of the widget. Request is a map containing a key with a value containing an array of ids. 404 not found will be returned when parameter is missing or incorrect.",
        "endpoint": "api/v2/reports/charts/parameters/{id}"
    }
}